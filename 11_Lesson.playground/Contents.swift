//Homework

// 1 –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è:
//enum CarBrand {
// case toyota
// case honda
// case bmv
// case tesla
//}
//–í—ã–≤–µ–¥–µ—Ç–µ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ‚Äú–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 30%‚Äù,  –≤ —Ç–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –±—É–¥–µ—Ç .toyota

enum CarBrand {
    case toyota
    case honda
    case bmv
    case tesla
}

let carBrands: [CarBrand] = [.bmv, .honda, .tesla, .toyota]

for brend in carBrands {
    if brend == .toyota {
        print("–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 30%")
    } else {
        print("–°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ \(brend) –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è")
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
if carBrands.contains(.toyota) {
    print("C–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã")
}

// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –¥–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è:

//enum CarType {
// case sedan
// case suv
// case hatchback
// case truck
//}
//
//enum RoadType {
// case paved
// case gravel
//}
//–ü–µ—Ä–≤–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∞ –≤—Ç–æ—Ä–æ–µ –∑–∞ —Ç–∏–ø –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è. –ü—Ä–æ–¥—É–º–∞–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è, –±—É–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è —Ç–∏–ø—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ï—Å–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏–µ paved —Ç–æ —ç—Ç–æ sedan –∏ hatchback, –µ—Å–ª–∏ gravel —Ç–æ suv –∏ truck. –í—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ‚Äù type road: <—Ç–∏–ø –¥–æ—Ä–æ–≥–∏>, cars: <—Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —ç—Ç—É –¥–æ—Ä–æ–≥—É>

enum CarType {
    case sedan
    case suv
    case hatchback
    case truck
}

enum RoadType {
    case paved
    case gravel
}

let roadType : RoadType = .gravel

switch roadType {
case .paved:
    print("type road: \(roadType), cars \(CarType.sedan), \(CarType.hatchback)")
case .gravel:
    print("type road: \(roadType), cars: \(CarType.suv), \(CarType.truck)")
}

// –¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ Activity , —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–µ–π—Å–∞–º–∏: reading, running, shopping.
//–ø–µ—Ä–≤—ã–π –∫–µ–π—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø–∞: (book: String), –≤—Ç–æ—Ä–æ–π: (distance: Double) –∏ —Ç—Ä–µ—Ç–∏–π: (items: [String]). –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç, —Ç–æ–≥–æ –∫–∞–∫–æ–π –∫–µ–π—Å —Å —Ç–∏–ø–æ–º Activity –≤—ã–±—Ä–∞–Ω, –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–µ–π—Å reading: ‚Äú–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —á–∏—Ç–∞—é <–∫–Ω–∏–≥–∞>‚Äù, –µ—Å–ª–∏ –∫–µ–π—Å running: ‚Äú–ü—Ä–æ–±–µ–∂–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è <–¥–∏—Å—Ç–∞–Ω—Ü–∏—è> –∫–º ‚Äú, –µ—Å–ª–∏ –∫–µ–π—Å shopping: ‚Äú–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞: <—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫>‚Äù

enum Acrivity {
    case  reading(book: String)
    case running(distance: Double)
    case shopping(items: [String])
}

let shopItems: [String] = ["–ú–∞–∫–∞—Ä–æ–Ω—ã", "–•–ª–µ–±", "–ì—Ä–∞–Ω–∞—Ç–æ–≤—ã–π —Å–æ–∫", "–ú–æ–ª–æ–∫–æ"]
let reading: Acrivity = .reading(book: "–ü–∞—É–ª–æ –ö–æ—ç–ª—å–æ - –ê–ª—Ö–∏–º–∏–∫")
let runningOutSide: Acrivity = .running(distance: 10.5)
let itemsShopping: Acrivity = .shopping(items: shopItems)

switch runningOutSide {
case .reading(let book):
    print("–°–µ–≥–æ–¥–Ω—è —è —á–∏—Ç–∞—é \(book)")
case .running(let distance):
    print("C–µ–≥–æ–¥–Ω—è –º–Ω–µ –Ω–∞–¥–æ –ø—Ä–æ–±–µ–∂–∞—Ç—å \(distance) –∫–º")
case .shopping(let items):
    print("H—É–∂–Ω–æ –∫—É–ø–∏—Ç—å \(items) –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
}


// 1) –ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –ø–æ–Ω–∏–º–∞–µ—Ç–µ enumerations:—á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –≤ —á–µ–º –∏—Ö —Å–º—ã—Å–ª, –∑–∞—á–µ–º –Ω—É–∂–Ω—ã.
//–í–∞—à–µ –ª–∏—á–Ω–æ–µ –º–Ω–µ–Ω–∏–µ: –∫–∞–∫ –∏ –≥–¥–µ –∏—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?

print(" Enumirations - —ç—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è,  –Ω—É–∂–Ω—ã –æ–Ω–∏ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–ø—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç. –ò—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–ºe–Ω—è—Ç—å –¥–ª—è –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç–æ–≤")

// 2) –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ 5-10 enum —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ + —Å–æ–∑–¥–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–≤–æ–∏—Ö enumerations.
//–ì–ª–∞–≤–Ω–æ–µ, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è: –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å –∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
// —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —ç–Ω—É–º—ã —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ —Ç–∞–∫ –∂–µ —á–µ—Ä–µ–∑ switch –ø—Ä–æ–≥–Ω–∞—Ç—å

enum ShopsName: CaseIterable {
    case zara
    case coton
    case nike
    case puma
    case adidas
    case kari
}

enum Cars: CaseIterable {
    case audi
    case bmv
    case mersedes
    case lexus
    case kia
    case pagani
}

enum City: CaseIterable {
    case moscow
    case sochi
    case krasnodar
    case london
    case magadan
    case vladivostok
}

enum Day: CaseIterable{
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    
}

enum ClothingSize: CaseIterable {
    case small
    case medium
    case large
    case extraLarge
}

let brends = ShopsName.allCases
let carBrends = Cars.allCases
let cities = City.allCases
let days = Day.allCases
let sizes = ClothingSize.allCases

func printEnums(enums: [Any]) -> String {
    var items = ""
    for item in enums {
        items.append(" \(item)")
    }
    
    return items
    
}

printEnums(enums: brends)
printEnums(enums: carBrands)
printEnums(enums: cities)
printEnums(enums: days)
printEnums(enums: sizes)

/*
 –°–æ–∑–¥–∞–π—Ç–µ —ç–Ω–∞–º Person, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç 3 –∫–µ–π—Å–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —Ç–∞–∫—Å–∏—Å—Ç, –º–æ—Ä—è–∫ üôÇ
 –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
 
 –∞) ‚≠ê
 —Å–æ—Ö—Ä–∞–Ω–∏–µ—Ç–µ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ rawValue. –°–æ–∑–¥–∞–π—Ç–µ 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç–Ω–∞–º–∞(–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–µ–π—Å) –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)
 
 –±) ‚≠ê‚≠ê
 —Å–æ–∑–¥–∞–π—Ç–µ —É —ç–Ω–∞–º–∞ —Ñ-—Ü–∏—é greeting, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É. –≠—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –§-—Ü–∏—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ switch. –ü–æ–¥—Å–∫–∞–∑–∫–∞:
 –≤ switch –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å self)
 –°–æ–∑–¥–∞–π—Ç–µ 3 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)
 
 –≤ ) ‚≠ê‚≠ê‚≠ê
 —Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–∏–Ω —ç–Ω–∞–º Skil –∏ –µ–≥–æ –∫–µ–π—Å–∞–º–∏ –±—É–¥—É—Ç "–≤–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É", "–±—ã—Å—Ç—Ä–æ –ø–ª–∞–≤–∞—Ç—å", "–ø–∏—Å–∞—Ç—å –∫–æ–¥"(–≤ –∫–æ–¥–µ —ç—Ç–æ –¥–æ–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏). –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –∫–µ–π—Å–æ–≤ —ç–Ω–∞–º–∞ Person —Å–¥–µ–ª–∞–π—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ skil, —Ç–∏–ø –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç Skil. –£ —ç–Ω–∞–º–∞ Person —Å–æ–∑–¥–∞–π—Ç–µ —Ñ-—Ü–∏—é skil, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–∏–ø Skil.
 –°–æ–∑–¥–∞–π—Ç–µ 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç–Ω–∞–º–∞ Person, –ø–æ–ª–æ–∂–∏—Ç–µ –∏—Ö –≤ –º–∞—Å—Å–∏–≤, –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –º–∞—Å—Å–∏–≤—É —Ü–∏–∫–ª–æ–º for(–º–æ–∂–Ω–æ forEach) –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–∫–∏–ª –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ )
 
 –≥) ‚≠ê‚≠ê‚≠ê‚≠ê
 –í —ç–Ω–∞–º–µ Skil –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ 3 –∫–µ–µ–π—Å–∞: –±–µ–≥–∞—Ç—å, –ø—Ä—ã–≥–∞—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç—å) –ò –≤ —ç—Ç–æ–º –∂–µ —ç–Ω–∞–º–µ —Å–æ–∑–¥–∞–π—Ç–µ –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ var isSpecialSkil: Bool { // —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤–∞‚Ä¶ }
 –í —ç–Ω–∞–º–µ Person —Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –ª–µ–Ω—Ç—è–π –∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ var skils: [Skil] { // ‚Ä¶ } (–≤ —ç—Ç–æ–º –≤—ã—á–∏—Å–ª—è–µ–º–æ–º —Å–≤–æ–π—Å—Ç–≤–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∫–∏–ª–æ–≤:
 - –¥–µ–≤–µ–ª–æ–ø–µ—Ä: —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–¥, –≥–æ–≤–æ—Ä–∏—Ç—å –∏ –ø—Ä—ã–≥–∞—Ç—å(–±–µ–≥–∞—Ç—å –æ–Ω —Ç—É–ø–æ –Ω–µ —Ö–æ—á–µ—Ç –∏–±–æ –æ–±–ª–µ–Ω–∏–ª—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã —Å–∏–¥–µ–Ω–∏—è –∑–∞ –∫–æ–º–ø–æ–º)
 - –≤–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫—Å–∏: —É–º–µ–µ—Ç –≤–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É, –±–µ–≥–∞—Ç—å, –ø—Ä—ã–≥–∞—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç—å
 - –º–æ—Ä—è–∫: —É–º–µ–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–ª–∞–≤–∞—Ç—å, –±–µ–≥–∞—Ç—å, –ø—Ä—ã–≥–∞—Ç—å –æ–Ω –Ω–µ —É–º–µ–µ—Ç(—Ç–æ—á–Ω–µ–µ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç –ø—Ä—ã–≥–∞—Ç—å —Å –±–æ—Ä—Ç–∞ —Å—É–¥–Ω–∞), –≥–æ–≤–æ—Ä–∏—Ç—å –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ–Ω –µ—â–µ –∏ –∫–æ–¥ –ø–∏—à–µ—Ç)üòâ
 - –ª–µ–Ω—Ç—è–π —É–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–æ–º –±–æ–ª—Ç–∞—Ç—å
 –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –Ω–µ–º—É —Ü–∏–∫–ª–æ–º –∏ –ø—É—Å—Ç—å –∫–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ—Ç –Ω–∞—Å –∏ —Å–∫–∞–∂–µ—Ç –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –Ω–µ—Ç)
 
 –¥) ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
 –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≥)
 –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Array  –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Skil(–∏—Å–ø–æ–ª—å–∑—É–µ–π—Ç–µ where). –í —ç—Ç–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞ var specialSkils: [Skil] { ‚Ä¶ } –∏ var ordinarySkills: [Skil] { ‚Ä¶ }. –û–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –∏–º–µ—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ filter, –∞ –≤—Ç–æ—Ä–æ–µ –¥–æ–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, —Ç–∞–∫ –∫–∞–∫ —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å—é.
 –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∫–∏–ª–æ–≤, –∞ —Å–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö)
 */

// –∞) ‚≠ê —Å–æ—Ö—Ä–∞–Ω–∏–µ—Ç–µ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ rawValue. –°–æ–∑–¥–∞–π—Ç–µ 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç–Ω–∞–º–∞(–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–µ–π—Å) –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)

enum Person2: String {
    case programmer = "Hallo World"
    case cabbie = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤ –ü–∞—Ä–∫ –ì–∞–ª–∏—Ü–∫–æ–≥–æ –∂–µ?"
    case sailor = "–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!"
}

func printGreeting(_ greeting: Person2) {
    print(greeting.rawValue)
}

if let greetingProgrammer = Person2(rawValue: "Hallo World") {
    printGreeting(greetingProgrammer)
}

if let greetingCabbie = Person2(rawValue: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤ –ü–∞—Ä–∫ –ì–∞–ª–∏—Ü–∫–æ–≥–æ –∂–µ?") {
    printGreeting(greetingCabbie)
}

if let greetingSailor = Person2(rawValue: "–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!") {
    printGreeting(greetingSailor)
}

// –±)‚≠ê‚≠ê
// —Å–æ–∑–¥–∞–π—Ç–µ —É —ç–Ω–∞–º–∞ —Ñ-—Ü–∏—é greeting, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É. –≠—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –§-—Ü–∏—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ switch. –ü–æ–¥—Å–∫–∞–∑–∫–∞:
// –≤ switch –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å self)
// –°–æ–∑–¥–∞–π—Ç–µ 3 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)
// //

enum MorePerson {
    case Alex, Anton, Vladimir
    func greetin() -> String {
        switch self {
        case .Alex:
            return "Hi, Alex"
        case .Anton:
            return "Hi, Anton"
        case .Vladimir:
            return "Hi, Vlodimir"
        }
    }
}

let personAlex = MorePerson.Alex.greetin()
let personAnton = MorePerson.Anton.greetin()
let personVladimir = MorePerson.Vladimir.greetin()

print("\(personAnton), \(personAlex), \(personVladimir)")

// –≤ ) ‚≠ê‚≠ê‚≠ê
//—Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–∏–Ω —ç–Ω–∞–º Skil –∏ –µ–≥–æ –∫–µ–π—Å–∞–º–∏ –±—É–¥—É—Ç "–≤–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É", "–±—ã—Å—Ç—Ä–æ –ø–ª–∞–≤–∞—Ç—å", "–ø–∏—Å–∞—Ç—å –∫–æ–¥"(–≤ –∫–æ–¥–µ —ç—Ç–æ –¥–æ–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏). –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –∫–µ–π—Å–æ–≤ —ç–Ω–∞–º–∞ Person —Å–¥–µ–ª–∞–π—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ skil, —Ç–∏–ø –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç Skil. –£ —ç–Ω–∞–º–∞ Person —Å–æ–∑–¥–∞–π—Ç–µ —Ñ-—Ü–∏—é skil, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–∏–ø Skil.
//–°–æ–∑–¥–∞–π—Ç–µ 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç–Ω–∞–º–∞ Person, –ø–æ–ª–æ–∂–∏—Ç–µ –∏—Ö –≤ –º–∞—Å—Å–∏–≤, –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –º–∞—Å—Å–∏–≤—É —Ü–∏–∫–ª–æ–º for(–º–æ–∂–Ω–æ forEach) –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–∫–∏–ª –∫–∞–∂–¥–æ–≥–æ //–ø–µ—Ä—Å–æ–Ω–∞–∂–∞ )

enum Person: String {
    case programmer = "–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç!"
    case taxiDriver = "–ü—Ä–∏–≤–µ—Ç, —è —Ç–∞–∫—Å–∏—Å—Ç!"
    case sailor = "–ü—Ä–∏–≤–µ—Ç, —è –º–æ—Ä—è–∫!"
    
    enum Skill {
        case drivingCar
        case swimmingFast
        case coding
        
    }
    
    func skill() -> Skill {
        switch self {
        case .programmer:
            return .coding
        case .taxiDriver:
            return .drivingCar
        case .sailor:
            return .swimmingFast
        }
    }
}

let person1 = Person.programmer
let person2 = Person.taxiDriver
let person3 = Person.sailor
let persons: [Person] = [person1, person2, person3]

for person in persons {
    switch person.skill() {
    case .drivingCar:
        print("–Ø —É–º–µ—é –≤–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É!")
    case .swimmingFast:
        print("–Ø —É–º–µ—é –±—ã—Å—Ç—Ä–æ –ø–ª–∞–≤–∞—Ç—å!")
    case .coding:
        print("–Ø —É–º–µ—é –ø–∏—Å–∞—Ç—å –∫–æ–¥!")
    }
}

//–≥) ‚≠ê‚≠ê‚≠ê‚≠ê
//–í —ç–Ω–∞–º–µ Skil –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ 3 –∫–µ–µ–π—Å–∞: –±–µ–≥–∞—Ç—å, –ø—Ä—ã–≥–∞—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç—å) –ò –≤ —ç—Ç–æ–º –∂–µ —ç–Ω–∞–º–µ —Å–æ–∑–¥–∞–π—Ç–µ –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ var isSpecialSkil: Bool { // —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤–∞‚Ä¶ }
//    –í —ç–Ω–∞–º–µ Person —Å–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –ª–µ–Ω—Ç—è–π –∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ var skils: [Skil] { // ‚Ä¶ } (–≤ —ç—Ç–æ–º –≤—ã—á–∏—Å–ª—è–µ–º–æ–º —Å–≤–æ–π—Å—Ç–≤–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∫–∏–ª–æ–≤:
//        - –¥–µ–≤–µ–ª–æ–ø–µ—Ä: —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–¥, –≥–æ–≤–æ—Ä–∏—Ç—å –∏ –ø—Ä—ã–≥–∞—Ç—å(–±–µ–≥–∞—Ç—å –æ–Ω —Ç—É–ø–æ –Ω–µ —Ö–æ—á–µ—Ç –∏–±–æ –æ–±–ª–µ–Ω–∏–ª—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã —Å–∏–¥–µ–Ω–∏—è –∑–∞ –∫–æ–º–ø–æ–º)
//        - –≤–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫—Å–∏: —É–º–µ–µ—Ç –≤–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É, –±–µ–≥–∞—Ç—å, –ø—Ä—ã–≥–∞—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç—å
//        - –º–æ—Ä—è–∫: —É–º–µ–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–ª–∞–≤–∞—Ç—å, –±–µ–≥–∞—Ç—å, –ø—Ä—ã–≥–∞—Ç—å –æ–Ω –Ω–µ —É–º–µ–µ—Ç(—Ç–æ—á–Ω–µ–µ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç –ø—Ä—ã–≥–∞—Ç—å —Å –±–æ—Ä—Ç–∞ —Å—É–¥–Ω–∞), –≥–æ–≤–æ—Ä–∏—Ç—å –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ–Ω –µ—â–µ –∏ –∫–æ–¥ –ø–∏—à–µ—Ç)üòâ
//        - –ª–µ–Ω—Ç—è–π —É–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–æ–º –±–æ–ª—Ç–∞—Ç—å
//        –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ø—Ä–æ–π–¥–∏—Ç–µ—Å—å –ø–æ –Ω–µ–º—É —Ü–∏–∫–ª–æ–º –∏ –ø—É—Å—Ç—å –∫–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ—Ç –Ω–∞—Å –∏ —Å–∫–∞–∂–µ—Ç –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –Ω–µ—Ç)

enum Persons: String {
    case programmer = "–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç!"
    case taxiDriver = "–ü—Ä–∏–≤–µ—Ç, —è —Ç–∞–∫—Å–∏—Å—Ç!"
    case sailor = "–ü—Ä–∏–≤–µ—Ç, —è –º–æ—Ä—è–∫!"
    case lazy
    
    enum Skill {
        case drivingCar
        case swimmingFast
        case coding
        case running
        case jumping
        case speaking
        
        var isSpecialSkill: Bool {
            switch self {
            case .coding, .drivingCar, .swimmingFast:
                return true
            default:
                return false
            }
        }
    }
    
    var skills: [Skill] {
        switch self {
        case .programmer:
            return [.coding, .speaking, .jumping]
        case .taxiDriver:
            return [.drivingCar, .running, .jumping, .speaking]
        case .sailor:
            return [.swimmingFast, .running, .speaking, .coding]
        case .lazy:
            return [.speaking]
        }
    }
}

let characters: [Persons] = [.programmer, .taxiDriver, .sailor, .lazy]

for character in characters {
    switch character {
    case .programmer:
        print("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.")
    case .taxiDriver:
        print("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–æ–¥–∏—Ç–µ–ª—å —Ç–∞–∫—Å–∏.")
    case .sailor:
        print("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ—Ä—è–∫.")
    case .lazy:
        print("–ü—Ä–∏–≤–µ—Ç! –Ø –ª–µ–Ω—Ç—è–π.")
    }
    
    let hasSpecialSkills = character.skills.contains { $0.isSpecialSkill }
    if hasSpecialSkills {
        print("–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.")
    } else {
        print("–£ –º–µ–Ω—è –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.")
    }
}


